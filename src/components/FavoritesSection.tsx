import { useState, useEffect } from 'react'
import { getFavoriteIds } from '../utils/favorites'
import { getCoinsByIds } from '../utils/cryptoApi'
import type { CryptoCoin } from '../utils/cryptoApi'
import CoinCard from './CoinCard'
import LoadingSpinner from './ui/LoadingSpinner'
import ErrorBanner from './ui/ErrorBanner'
import './FavoritesSection.css'

export default function FavoritesSection() {
  const [favoriteCoins, setFavoriteCoins] = useState<CryptoCoin[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [favoritesCount, setFavoritesCount] = useState(0)

  const loadFavoriteCoins = async () => {
    try {
      setLoading(true)
      setError(null)
      
      const favoriteIds = getFavoriteIds()
      setFavoritesCount(favoriteIds.length)
      
      if (favoriteIds.length === 0) {
        setFavoriteCoins([])
        return
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö
      const coins = await getCoinsByIds(favoriteIds.join(','))
      setFavoriteCoins(coins)
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç')
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', err)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    loadFavoriteCoins()
  }, [])

  useEffect(() => {
    const handleFavoritesChange = () => {
      loadFavoriteCoins()
    }

    window.addEventListener('favoritesChanged', handleFavoritesChange)
    return () => window.removeEventListener('favoritesChanged', handleFavoritesChange)
  }, [])

  if (loading) {
    return (
      <div className="favorites-section">
        <div className="favorites-loading">
          <LoadingSpinner />
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="favorites-section">
        <ErrorBanner 
          message={error} 
          onClose={() => setError(null)}
        />
      </div>
    )
  }

  return (
    <div className="favorites-section">
      <div className="favorites-header">
        <h2>‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</h2>
        <div className="favorites-stats">
          <span className="favorites-count">
            {favoritesCount} {favoritesCount === 1 ? '–º–æ–Ω–µ—Ç–∞' : favoritesCount < 5 ? '–º–æ–Ω–µ—Ç—ã' : '–º–æ–Ω–µ—Ç'}
          </span>
        </div>
      </div>

      {favoriteCoins.length === 0 ? (
        <div className="empty-favorites">
          <div className="empty-favorites-icon">üíî</div>
          <h3>–ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç</h3>
          <p>
            –î–æ–±–∞–≤—å—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∏–∫–æ–Ω–∫—É ‚ù§Ô∏è –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –º–æ–Ω–µ—Ç.
            –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ –∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ 
            –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏.
          </p>
          <div className="favorites-tips">
            <h4>üí° –°–æ–≤–µ—Ç—ã:</h4>
            <ul>
              <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–æ–Ω–µ—Ç</li>
              <li>–ò–∑—É—á–∞–π—Ç–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</li>
              <li>–î–æ–±–∞–≤–ª—è–π—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Ö –¥–∏–Ω–∞–º–∏–∫–∏</li>
            </ul>
          </div>
        </div>
      ) : (
        <div className="favorites-grid">
          {favoriteCoins.map((coin) => (
            <CoinCard key={coin.id} coin={coin} />
          ))}
        </div>
      )}
    </div>
  )
}
